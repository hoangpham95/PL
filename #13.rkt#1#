#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 16 #"Source Code Pro\0"
0 20 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 2434 0 28 3 11 #"#lang pl 13"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; ================================================================"
 #"=="
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";;; Syntax"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"#| The BNF:"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"   <TOY> ::= <num>"
0 0 17 29 1 #"\n"
0 0 17 3 17 #"           | <id>"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"           | { set! <id> <TOY> }"
0 0 17 29 1 #"\n"
0 0 17 3 59
#"           | { bind {{ <id> <TOY> } ... } <TOY> <TOY> ... }"
0 0 17 29 1 #"\n"
0 0 17 3 62
#"           | { bindrec {{ <id> <TOY> } ... } <TOY> <TOY> ... }"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"           | { fun { <id> ... } <TOY> <TOY> ... }"
0 0 17 29 1 #"\n"
0 0 17 3 50 #"           | { rfun { <id> ... } <TOY> <TOY> ... }"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"           | { if <TOY> <TOY> <TOY> }"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"           | { <TOY> <TOY> ... }"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; A matching abstract syntax tree datatype:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"Num"
0 0 24 3 2 #"  "
0 0 14 3 6 #"Number"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 2 #"Id"
0 0 24 3 3 #"   "
0 0 14 3 6 #"Symbol"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"Set"
0 0 24 3 2 #"  "
0 0 14 3 6 #"Symbol"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"Bind"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"BindRec"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"Fun"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"RFun"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"Call"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 2 #"If"
0 0 24 3 3 #"   "
0 0 14 3 3 #"TOY"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"unique-list?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; Tests whether a list is unique, guards Bind and Fun values."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unique-list?"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 12 #"unique-list?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Sexpr"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; to convert s-expressions into TOYs"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"number:"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 6 #")    ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"symbol:"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 2 #"Id"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"more"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol:"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 14 3 3 #"new"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Set"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"bad `set!' syntax in ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 6 #"binder"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"bindrec"
0 0 24 3 3 #")) "
0 0 14 3 4 #"more"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol:"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 3 #") ("
0 0 14 3 6 #"sexpr:"
0 0 24 3 1 #" "
0 0 14 3 6 #"nameds"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"sexpr:"
0 0 24 3 1 #" "
0 0 14 3 5 #"body0"
0 0 24 3 3 #") ("
0 0 14 3 6 #"sexpr:"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unique-list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 14 3 6 #"binder"
0 0 24 3 2 #") "
0 0 14 3 4 #"Bind"
0 0 24 3 1 #" "
0 0 14 3 7 #"BindRec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 5 #"names"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 6 #"nameds"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"body0"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"duplicate `~s' names: ~s\""
0 0 24 3 1 #" "
0 0 14 3 6 #"binder"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"bad `~s' syntax in ~s\""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 6 #"binder"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 6 #"funner"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rfun"
0 0 24 3 3 #")) "
0 0 14 3 4 #"more"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol:"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"sexpr:"
0 0 24 3 1 #" "
0 0 14 3 5 #"body0"
0 0 24 3 3 #") ("
0 0 14 3 6 #"sexpr:"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unique-list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 6 #"funner"
0 0 24 3 2 #") "
0 0 14 3 3 #"Fun"
0 0 24 3 1 #" "
0 0 14 3 4 #"RFun"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 5 #"names"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"body0"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"duplicate `~s' names: ~s\""
0 0 24 3 1 #" "
0 0 14 3 6 #"funner"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"bad `~s' syntax in ~s\""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 6 #"funner"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"more"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"If"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 15 3 4 #"cond"
0 0 24 3 3 #") ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 4 #"then"
0 0 24 3 3 #") ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"bad `if' syntax in ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sexpr:"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 17 3 30 #"; other lists are applications"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"Call"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"bad syntax in ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; Parses a string containing an TOY expression to a TOY AST."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string->sexpr"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; ================================================================"
 #"=="
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #";;; Values and environments"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"EmptyEnv"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"FrameEnv"
0 0 24 3 1 #" "
0 0 14 3 5 #"FRAME"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"BogusV"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"RktV"
0 0 24 3 2 #"  "
0 0 14 3 3 #"Any"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"FunV"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #") ("
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #") "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #"] "
0 0 17 3 15 #"; `byref?' flag"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"PrimV"
0 0 24 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; a frame is an association list of names and values."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"FRAME"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 4 #"List"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Boxof"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; a single bogus value to use wherever needed"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"the-bogus-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"BogusV"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"raw-extend"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Boxof"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #")) "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; extends an environment with a new frame, given names and value"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; boxes"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"raw-extend"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 12 #"boxed-values"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 12 #"boxed-values"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"FrameEnv"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #"] ["
0 0 14 3 9 #"boxed-val"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Boxof"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 9 #"boxed-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 12 #"boxed-values"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"raw-extend"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"arity mismatch for names: ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"extend"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #") "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; extends an environment with a new frame (given plain values)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"extend"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"raw-extend"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #") "
0 0 14 3 6 #"values"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"extend-rec"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #")) "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; extends an environment with a new recursive frame (given"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; compiled expressions)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"extend-rec"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"extend"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 2 #") "
0 0 14 3 15 #"the-bogus-value"
0 0 24 3 2 #") "
0 0 14 3 5 #"exprs"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 62
#";; note: no need to check the lengths here, since this is only"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 66
#";; called for `bindrec', and the syntax make it impossible to have"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 20 #";; different lengths"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"for-each"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #"] ["
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"set-box!"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 24 3 3 #") ("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 7 #"new-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Boxof"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; looks for a name in an environment, searching through each frame."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"EmptyEnv"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"no binding for ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"FrameEnv"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"assq"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"unwrap-rktv"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; helper for `racket-func->prim-val': unwrap a RktV wrapper in"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; preparation to be sent to the primitive function"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"unwrap-rktv"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"racket-func"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"bad input: ~s\""
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Function"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Boxof"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; converts a racket function to a primitive compiler function which"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; is a PrimV holding a ((Listof VAL) -> VAL) function.  (the"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; resulting function will use the list function as is, and it is th"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#";; list function's responsibility to throw an error if it's given a"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; bad number of arguments or bad input types.)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket-func"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"list-func"
0 0 24 3 2 #" ("
0 0 14 3 26 #"make-untyped-list-function"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket-func"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"box"
0 0 24 3 2 #" ("
0 0 14 3 5 #"PrimV"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"RktV"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-func"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 11 #"unwrap-rktv"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; The global environment has a few primitives:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 18 #"global-environment"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"global-environment"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"FrameEnv"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 9 #";; values"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"box"
0 0 24 3 2 #" ("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 2 #" ("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"EmptyEnv"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; ================================================================"
 #"=="
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Compilation"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"compile-body"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; compiles a list of expressions, returns the last value."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"compile-body"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 56 #";; note: relies on the fact that the body is never empty"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"1st"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"compile"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 3 #"1st"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 12 #"compile-body"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 38 #";; a shorter version that uses `foldl'"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 64
#";; (foldl (lambda ([expr : TOY] [old : VAL]) (compile expr env))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 37 #";;        (compile (first exprs) env)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 23 #";;        (rest exprs))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"get-boxes"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 2 #") "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Boxof"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; utility for applying rfun"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-boxes"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 2 #"Id"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"compile"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 44 #"\"rfun application with a non-identifier: ~s\""
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 1 #"e"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 5 #"exprs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"compile"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"TOY"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; compile TOY expressions."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compile"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 46 #";; convenient helper for running compiled code"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"runner"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 3 #" (("
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"runner"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"compiled"
0 0 24 3 3 #") ("
0 0 14 3 8 #"compiled"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 17 #"compiler-enabled?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"compile"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"compiler disabled\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #")   ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 4 #"]) ("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #"Id"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 4 #"]) ("
0 0 14 3 5 #"unbox"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"Set"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"set-box!"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #") (("
0 0 14 3 7 #"compile"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 15 #"the-bogus-value"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 4 #"Bind"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 12 #"compile-body"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 3 #") ("
0 0 14 3 6 #"extend"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 8 #"compiled"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 56 #"                                                      (("
0 0 14 3 6 #"runner"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 8 #"compiled"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 7 #"compile"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                               "
0 0 14 3 3 #"env"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 7 #"BindRec"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 12 #"compile-body"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 3 #") ("
0 0 14 3 10 #"extend-rec"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 7 #"compile"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"Fun"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"FunV"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 2 #" ("
0 0 14 3 12 #"compile-body"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 4 #"RFun"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"FunV"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 2 #" ("
0 0 14 3 12 #"compile-body"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 4 #"Call"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-exprs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"fval"
0 0 24 3 3 #" (("
0 0 14 3 7 #"compile"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 36 #";; delay compileuating the arguments"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 8 #"arg-vals"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 8 #"compiled"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                         (("
0 0 14 3 6 #"runner"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 8 #"compiled"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 7 #"compile"
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-exprs"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"fval"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 5 #"PrimV"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"arg-vals"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 4 #"FunV"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 7 #"fun-env"
0 0 24 3 1 #" "
0 0 14 3 6 #"byref?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"byref?"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"raw-extend"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 9 #"get-boxes"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 14 3 9 #"arg-exprs"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                            "
0 0 14 3 7 #"fun-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 6 #"extend"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 8 #"arg-vals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 7 #"fun-env"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"compile"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 19 3 39 #"\"function call with a non-function: ~s\""
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 4 #"fval"
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #"If"
0 0 24 3 1 #" "
0 0 14 3 9 #"cond-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 7 #"compile"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 3 #" (("
0 0 14 3 7 #"compile"
0 0 24 3 1 #" "
0 0 14 3 9 #"cond-expr"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 17 3 33 #";; Racket value => use as boolean"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 31 #";; other values are always true"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 9 #"then-expr"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 9 #"else-expr"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 17 #"compiler-enabled?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Boxof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; a global flag that can disable the compiler"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"compiler-enabled?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; compiles and runs a TOY program contained in a string"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"set-box!"
0 0 24 3 1 #" "
0 0 14 3 17 #"compiler-enabled?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 8 #"compiled"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compile"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"set-box!"
0 0 24 3 1 #" "
0 0 14 3 17 #"compiler-enabled?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 8 #"compiled"
0 0 24 3 1 #" "
0 0 14 3 18 #"global-environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"run"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 19 3 38 #"\"the program returned a bad value: ~s\""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 6 #"result"
0 0 24 3 6 #")]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; ================================================================"
 #"=="
) 0 0 24 29 1 #"\n"
0 0 17 3 9 #";;; Tests"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;(test (run \"{{fun {x} {+ x 1}} 4}\")"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;      => 5)"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;(test (run \"{bind {{add3 {fun {x} {+ x 3}}}} {add3 1}}\")"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;      => 4)"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;(test (run \"{bind {{add3 {fun {x} {+ x 3}}}"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";;                   {add1 {fun {x} {+ x 1}}}}"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;              {bind {{x 3}} {add1 {add3 x}}}}\")"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;      => 7)"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;(test (run \"{bind {{identity {fun {x} x}}"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;                   {foo {fun {x} {+ x 1}}}}"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;              {{identity foo} 123}}\")"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;      => 124)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;(test (run \"{bind {{x 3}}"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;              {bind {{f {fun {y} {+ x y}}}}"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;                {bind {{x 5}}"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;                  {f 4}}}}\")"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;      => 7)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;(test (run \"{{{fun {x} {x 1}}"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;              {fun {x} {fun {y} {+ x y}}}}"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;             123}\")"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;      => 124)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;;; More tests for complete coverage"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;(test (run \"{bind x 5 x}\")      =error> \"bad `bind' syntax\")"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;(test (run \"{fun x x}\")         =error> \"bad `fun' syntax\")"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";;(test (run \"{if x}\")            =error> \"bad `if' syntax\")"
0 0 24 29 1 #"\n"
0 0 17 3 55
#";;(test (run \"{}\")                =error> \"bad syntax\")"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;(test (run \"{bind {{x 5} {x 5}} x}\") =error> \"duplicate*bind*na"
 #"mes\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";;(test (run \"{fun {x x} x}\")     =error> \"duplicate*fun*names\")"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";;(test (run \"{+ x 1}\")           =error> \"no binding for\")"
0 0 24 29 1 #"\n"
0 0 17 3 54
#";;(test (run \"{+ 1 {fun {x} x}}\") =error> \"bad input\")"
0 0 24 29 1 #"\n"
0 0 17 3 54
#";;(test (run \"{+ 1 {fun {x} x}}\") =error> \"bad input\")"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;(test (run \"{1 2}\")             =error> \"with a non-function\")"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";;(test (run \"{{fun {x} x}}\")     =error> \"arity mismatch\")"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;(test (run \"{if {< 4 5} 6 7}\")  => 6)"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;(test (run \"{if {< 5 4} 6 7}\")  => 7)"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;(test (run \"{if + 6 7}\")        => 6)"
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #";;(test (run \"{fun {x} x}\")       =error> \"returned a bad value\""
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;; assignment tests"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;(test (run \"{set! {+ x 1} x}\")  =error> \"bad `set!' syntax\")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"{bind {{x 1}} {set! x {+ x 1}} x}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;; `bindrec' tests"
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #";;(test (run \"{bindrec {x 6} x}\") =error> \"bad `bindrec' syntax\""
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #";;;; (test (run \"{bindrec {{fact {fun {n}"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";;;;                               {if {= 0 n}"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;;;                                 1"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;;;                                 {* n {fact {- n 1}}}}}}}"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;               {fact 5}}\")"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;;       => 120)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;;; tests for multiple expressions and assignment"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;(test (run \"{bind {{make-counter"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;                     {fun {}"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;                       {bind {{c 0}}"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;                         {fun {}"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;                           {set! c {+ 1 c}}"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;                           c}}}}}"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;              {bind {{c1 {make-counter}}"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;                     {c2 {make-counter}}}"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;                {* {c1} {c1} {c2} {c1}}}}\")"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;      => 6)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;(test (run \"{bindrec {{foo {fun {}"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;                             {set! foo {fun {} 2}}"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;                             1}}}"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;              {+ {foo} {* 10 {foo}}}}\")"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;      => 21)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;; `rfun' tests"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;(test (run \"{{rfun {x} x} 4}\") =error> \"non-identifier\")"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;(test (run \"{bind {{swap! {rfun {x y}"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;                            {bind {{tmp x}}"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;                              {set! x y}"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;                              {set! y tmp}}}}"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;                   {a 1}"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;                   {b 2}}"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;              {swap! a b}"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;              {+ a {* 10 b}}}\")"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;      => 12)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;;; test that argument are not compileuated redundantly"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;(test (run \"{{rfun {x} x} {/ 4 0}}\") =error> \"non-identifier\")"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;(test (run \"{5 {/ 6 0}}\") =error> \"non-function\")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;;;; =============================================================="
 #"===="
) 0 0 24 29 1 #"\n"
0           0
